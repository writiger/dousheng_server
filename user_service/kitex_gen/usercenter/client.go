// Code generated by Kitex v0.4.4. DO NOT EDIT.

package usercenter

import (
	"context"
	kitex_gen "dousheng_server/user_service/kitex_gen"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Ping(ctx context.Context, Req *kitex_gen.Request, callOptions ...callopt.Option) (r *kitex_gen.Response, err error)
	Register(ctx context.Context, Req *kitex_gen.RegisterRequest, callOptions ...callopt.Option) (r *kitex_gen.BasicResponse, err error)
	Login(ctx context.Context, Req *kitex_gen.LoginRequest, callOptions ...callopt.Option) (r *kitex_gen.LoginResponse, err error)
	GetInfo(ctx context.Context, Req *kitex_gen.GetInfoRequest, callOptions ...callopt.Option) (r *kitex_gen.GetInfoResponse, err error)
	Follow(ctx context.Context, Req *kitex_gen.FollowRequest, callOptions ...callopt.Option) (r *kitex_gen.BasicResponse, err error)
	CancelFollow(ctx context.Context, Req *kitex_gen.FollowRequest, callOptions ...callopt.Option) (r *kitex_gen.BasicResponse, err error)
	JudgeFollow(ctx context.Context, Req *kitex_gen.FollowRequest, callOptions ...callopt.Option) (r *kitex_gen.JudgeFollowResponse, err error)
	FollowList(ctx context.Context, Req *kitex_gen.GetInfoRequest, callOptions ...callopt.Option) (r *kitex_gen.FollowListResponse, err error)
	FollowerList(ctx context.Context, Req *kitex_gen.GetInfoRequest, callOptions ...callopt.Option) (r *kitex_gen.FollowListResponse, err error)
	FriendList(ctx context.Context, Req *kitex_gen.GetInfoRequest, callOptions ...callopt.Option) (r *kitex_gen.FollowListResponse, err error)
	SendMessage(ctx context.Context, Req *kitex_gen.SendMessageRequest, callOptions ...callopt.Option) (r *kitex_gen.BasicResponse, err error)
	MessageList(ctx context.Context, Req *kitex_gen.MessageListRequest, callOptions ...callopt.Option) (r *kitex_gen.MessageResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kUserCenterClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kUserCenterClient struct {
	*kClient
}

func (p *kUserCenterClient) Ping(ctx context.Context, Req *kitex_gen.Request, callOptions ...callopt.Option) (r *kitex_gen.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Ping(ctx, Req)
}

func (p *kUserCenterClient) Register(ctx context.Context, Req *kitex_gen.RegisterRequest, callOptions ...callopt.Option) (r *kitex_gen.BasicResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Register(ctx, Req)
}

func (p *kUserCenterClient) Login(ctx context.Context, Req *kitex_gen.LoginRequest, callOptions ...callopt.Option) (r *kitex_gen.LoginResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Login(ctx, Req)
}

func (p *kUserCenterClient) GetInfo(ctx context.Context, Req *kitex_gen.GetInfoRequest, callOptions ...callopt.Option) (r *kitex_gen.GetInfoResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetInfo(ctx, Req)
}

func (p *kUserCenterClient) Follow(ctx context.Context, Req *kitex_gen.FollowRequest, callOptions ...callopt.Option) (r *kitex_gen.BasicResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Follow(ctx, Req)
}

func (p *kUserCenterClient) CancelFollow(ctx context.Context, Req *kitex_gen.FollowRequest, callOptions ...callopt.Option) (r *kitex_gen.BasicResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CancelFollow(ctx, Req)
}

func (p *kUserCenterClient) JudgeFollow(ctx context.Context, Req *kitex_gen.FollowRequest, callOptions ...callopt.Option) (r *kitex_gen.JudgeFollowResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.JudgeFollow(ctx, Req)
}

func (p *kUserCenterClient) FollowList(ctx context.Context, Req *kitex_gen.GetInfoRequest, callOptions ...callopt.Option) (r *kitex_gen.FollowListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FollowList(ctx, Req)
}

func (p *kUserCenterClient) FollowerList(ctx context.Context, Req *kitex_gen.GetInfoRequest, callOptions ...callopt.Option) (r *kitex_gen.FollowListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FollowerList(ctx, Req)
}

func (p *kUserCenterClient) FriendList(ctx context.Context, Req *kitex_gen.GetInfoRequest, callOptions ...callopt.Option) (r *kitex_gen.FollowListResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.FriendList(ctx, Req)
}

func (p *kUserCenterClient) SendMessage(ctx context.Context, Req *kitex_gen.SendMessageRequest, callOptions ...callopt.Option) (r *kitex_gen.BasicResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.SendMessage(ctx, Req)
}

func (p *kUserCenterClient) MessageList(ctx context.Context, Req *kitex_gen.MessageListRequest, callOptions ...callopt.Option) (r *kitex_gen.MessageResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MessageList(ctx, Req)
}
